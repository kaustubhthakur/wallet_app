
## Features

- **User Authentication**: Registration, login, logout with JWT tokens
- **Wallet Management**: Enable/disable wallet, check balance, update balance
- **Transaction History**: Paginated transaction history with filtering
- **Security**: JWT authentication, input validation, atomic transactions
- **Testing**: Comprehensive test suite with pytest and factory-boy
- **Documentation**: Detailed API documentation with examples

## Technology Stack

- **Backend**: Django 3.2, Django REST Framework
- **Database**: MongoDB with Djongo
- **Authentication**: JWT with djangorestframework-simplejwt
- **Task Queue**: Celery with Redis
- **Testing**: pytest, factory-boy, coverage
- **Containerization**: Docker and Docker Compose

## Installation

### Prerequisites

- Python 3.9+
- MongoDB 4.4+
- Redis 7.0+



3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

4. **Environment configuration**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

5. **Database setup**
   ```bash
   # Make sure MongoDB is running
   python manage.py migrate
   ```

6. **Create superuser**
   ```bash
   python manage.py createsuperuser
   ```

7. **Run the application**
   ```bash
   python manage.py runserver
   ```



3. **Create superuser**
   ```bash
   docker-compose exec web python manage.py createsuperuser
   ```

## API Endpoints

### Authentication Endpoints

- `POST /api/auth/register/` - User registration
- `POST /api/auth/login/` - User login
- `POST /api/auth/logout/` - User logout
- `GET /api/auth/profile/` - Get user profile

### Wallet Endpoints

- `POST /api/wallet/enable/` - Enable/disable wallet
- `GET /api/wallet/balance/` - Get wallet balance
- `POST /api/wallet/update-balance/` - Update wallet balance (credit/debit)

### Transaction Endpoints

- `GET /api/transactions/history/` - Get transaction history (paginated)

## API Usage Examples

### 1. User Registration
```bash
curl -X POST http://localhost:8000/api/auth/register/ \
  -H "Content-Type: application/json" \
  -d '{
    "username": "johndoe",
    "email": "john@example.com",
    "password": "securepassword123",
    "password_confirm": "securepassword123",
    "phone_number": "+1234567890"
  }'
```

**Response:**
```json
{
    "message": "User registered successfully",
    "user": {
        "id": 1,
        "username": "johndoe",
        "email": "john@example.com",
        "phone_number": "+1234567890",
        "created_at": "2025-06-28T10:00:00Z"
    },
    "tokens": {
        "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
        "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
    }
}
```

### 2. User Login
```bash
curl -X POST http://localhost:8000/api/auth/login/ \
  -H "Content-Type: application/